{"version":3,"sources":["Component/SideBar/SideBar.module.css","Component/Main/User/User.module.css","Component/Main/ChatWindow/Header/Header.module.css","Component/Main/ChatWindow/UserInput/UserInput.module.css","assets/ayo-ogunseinde-sibVwORYqs0-unsplash.jpg","assets/kal-visuals-b1Hg7QI-zcc-unsplash.jpg","assets/michael-dam-mEZ3PoFGs_k-unsplash.jpg","assets/philipe-cavalcante-Ugpcxb0jG4Q-unsplash.jpg","assets/christopher-campbell-rDEOVtE7vOs-unsplash.jpg","Component/Main/Main.module.css","Component/Main/ChatWindow/ChatWindow.module.css","Component/Main/ChatWindow/Chats/Chats.module.css","action/reducer/reducer.js","action/action.js","Component/SideBar/SideBar.js","Component/Main/User/User.js","Component/Main/ChatWindow/Header/Header.js","Component/Main/ChatWindow/Chats/Chat/Chat.js","Component/Main/ChatWindow/Chats/Chats.js","Component/Main/ChatWindow/UserInput/UserInput.js","Component/Main/ChatWindow/ChatWindow.js","Component/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","txtgen","require","contacts","Tony","userName","avatar","xianImage","status","sentence","userId","v4","Jane","YuanchaoImage","Anny","LydiaImage","Emily","SkylerImage","user","UserImage","activeUserIdInitial","id","messagesInitial","messages","0","is_user_msg","text","1","2","3","activeUserMessages","userInputInitial","value","rootReducer","combineReducers","state","action","type","activeUserId","number","Object","keys","pop","userInput","connect","props","console","log","data","map","key","className","classes","SideBar","contact","List","onClick","dispatch","setActiveUserId","clickHandler","alt","src","style","width","height","borderRadius","objectFit","ListItem","User","Image","marginLeft","marginRight","Button","Header","textAlign","Status","Chat","message","isUserMsg","Chats","updatedActiveUserMessages","onSubmit","e","input","preventDefault","Form","placeholder","onChange","target","Input","activeUser","values","Container","panel","Main","App","Boolean","window","location","hostname","match","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.90fc470d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideBar\":\"SideBar_SideBar__3LhU8\",\"List\":\"SideBar_List__2YW92\",\"ListItem\":\"SideBar_ListItem__z4mnJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"User\":\"User_User__2jvCF\",\"Image\":\"User_Image__1-Mu5\",\"Button\":\"User_Button__fFtO6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3qoaR\",\"Status\":\"Header_Status__2UbhJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"UserInput_Form__29nbm\",\"Input\":\"UserInput_Input__1eoQ6\"};","module.exports = __webpack_public_path__ + \"static/media/ayo-ogunseinde-sibVwORYqs0-unsplash.9f2dcbe5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kal-visuals-b1Hg7QI-zcc-unsplash.245453a4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/michael-dam-mEZ3PoFGs_k-unsplash.de9b37f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/philipe-cavalcante-Ugpcxb0jG4Q-unsplash.c9eb29ae.jpg\";","module.exports = __webpack_public_path__ + \"static/media/christopher-campbell-rDEOVtE7vOs-unsplash.d30290e3.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__3hqTp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ChatWindow_Container__3DRMt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chats\":\"Chats_Chats__1dZJh\"};","import xianImage from '../../assets/ayo-ogunseinde-sibVwORYqs0-unsplash.jpg';\nimport YuanchaoImage from '../../assets/kal-visuals-b1Hg7QI-zcc-unsplash.jpg';\nimport LydiaImage from '../../assets/michael-dam-mEZ3PoFGs_k-unsplash.jpg';\nimport SkylerImage from '../../assets/philipe-cavalcante-Ugpcxb0jG4Q-unsplash.jpg';\nimport UserImage from '../../assets/christopher-campbell-rDEOVtE7vOs-unsplash.jpg';\nimport {combineReducers} from 'redux';\nimport * as actionTypes from './../action';\nimport {v4} from 'uuid';\n\nconst txtgen = require('txtgen');\n\n\nconst contacts = {\n    Tony:{\n        userName:'Tony',\n        avatar: xianImage,\n        status:txtgen.sentence(),\n        userId: v4()\n    },\n    Jane:{\n        userName:'Jane',\n        avatar:YuanchaoImage,\n        status:txtgen.sentence(),\n        userId:v4()\n    },\n    Anny:{\n        userName:'Anny',\n        avatar:LydiaImage,\n        status:txtgen.sentence(),\n        userId:v4()\n    },\n    Emily:{\n        userName:'Emily',\n        avatar:SkylerImage,\n        status:txtgen.sentence(),\n        userId:v4()\n    }\n}\n\nconst contactsReducer = (state=contacts,action) => {\n    switch(action.type) {\n        default:\n            return state\n    }\n\n}\n\nconst user = {\n    userName:'Xian',\n    avatar:UserImage,\n    status:txtgen.sentence(),\n    userId:v4()\n}\n\nconst userReducer = (state=user,action) => {\n    switch(action.type) {\n        default:\n            return state\n    }\n\n}\n\nconst activeUserIdInitial = {\n    id: null\n}\n\nconst activeUserIdReducer = (state=activeUserIdInitial, action) =>{\n    switch(action.type) {\n        case actionTypes.SET_ACTIVE_USER_ID:\n            return {\n                ...state,\n                id: action.activeUserId\n            }\n        default:\n            return state\n    }\n}\n\n// const getMessages = (number) => {\n//     let messages = {}\n//     for(let i=0; i< number; i++) {\n//         messages[i] = txtgen.sentence()\n//     }\n//     return messages\n// }\n\nconst messagesInitial = {\n    messages:{\n        Tony:{\n            0:{\n                id:v4(),\n                is_user_msg: false,\n                text:txtgen.sentence()\n            },\n            1:{\n                id:v4(),\n                is_user_msg: true,\n                text:txtgen.sentence()\n            },\n            2:{\n                id:v4(),\n                is_user_msg: false,\n                text:txtgen.sentence()\n            },\n            3:{\n                id:v4(),\n                is_user_msg: true,\n                text:txtgen.sentence()\n            }\n        },\n        Jane:{\n            0:{\n                id:v4(),\n                is_user_msg: false,\n                text:txtgen.sentence()\n            },\n            1:{\n                id:v4(),\n                is_user_msg: true,\n                text:txtgen.sentence()\n            },\n            2:{\n                id:v4(),\n                is_user_msg: false,\n                text:txtgen.sentence()\n            },\n            3:{\n                id:v4(),\n                is_user_msg: true,\n                text:txtgen.sentence()\n            }\n        },\n        Anny:{\n            0:{\n                id:v4(),\n                is_user_msg: false,\n                text:txtgen.sentence()\n            },\n            1:{\n                id:v4(),\n                is_user_msg: true,\n                text:txtgen.sentence()\n            },\n            2:{\n                id:v4(),\n                is_user_msg: false,\n                text:txtgen.sentence()\n            },\n            3:{\n                id:v4(),\n                is_user_msg: true,\n                text:txtgen.sentence()\n            }\n        },\n        Emily:{\n            0:{\n                id:v4(),\n                is_user_msg: false,\n                text:txtgen.sentence()\n            },\n            1:{\n                id:v4(),\n                is_user_msg: true,\n                text:txtgen.sentence()\n            },\n            2:{\n                id:v4(),\n                is_user_msg: false,\n                text:txtgen.sentence()\n            },\n            3:{\n                id:v4(),\n                is_user_msg: true,\n                text:txtgen.sentence()\n            }\n        }\n    },\n    activeUserMessages:{}\n}\n\nconst messagesReducer = (state = messagesInitial,action) => {\n    switch(action.type) {\n        case actionTypes.GET_MESSAGES:\n            return{\n                ...state,\n                activeUserMessages:state.messages[action.userName]\n            }\n        case actionTypes.USER_SUBMIT:\n            const number = +Object.keys(state.activeUserMessages).pop()+1\n            return {\n                ...state,\n                activeUserMessages:{\n                    ...state.activeUserMessages,\n                    [number]: {\n                        id:v4(),\n                        is_user_msg:true,\n                        text:action.userInput\n                    }\n                }\n            }\n        default:\n            return state\n    }\n}\n\nconst userInputInitial = {\n    value:''\n}\n\nconst userInputReducer = (state=userInputInitial, action) => {\n    switch(action.type) {\n        case actionTypes.USER_INPUT:\n            return {\n                value:action.userInput\n            }\n        default:\n                return state\n    }\n}\n\nconst rootReducer = combineReducers({\n    contacts: contactsReducer,\n    user:userReducer,\n    activeUserId:activeUserIdReducer,\n    messages:messagesReducer,\n    userInput:userInputReducer\n})\n\nexport default rootReducer;","export const SET_ACTIVE_USER_ID = ' SET_ACTIVE_USER_ID';\nexport const GET_MESSAGES = 'GET_MESSAGES';\nexport const USER_INPUT = 'USER_INPUT';\nexport const USER_SUBMIT = 'USER_SUBMIT';\n\n// const txtgen = require('txtgen');\n\nexport const setActiveUserId = id => {\n    return {\n        type: SET_ACTIVE_USER_ID,\n        activeUserId: id\n    }\n}\n\n// export const getMessages = (number) => {\n//     let messages = {}\n//     for (let i = 0; i < number; i++) {\n//         messages[i] = txtgen.sentence()\n//     }\n//     return messages\n// }\n\nexport const getMessages = userName => {\n    return {\n        type: GET_MESSAGES,\n        userName: userName\n    }\n}\n\nexport const userInput = input => {\n    return {\n        type: USER_INPUT,\n        userInput: input\n    }\n}\n\nexport const handleUserSubmit = (input, id) => {\n    return {\n        type: USER_SUBMIT,\n        userInput: input,\n        activeUserId: id\n    }\n}","import React from 'react';\nimport classes from './SideBar.module.css';\nimport {setActiveUserId} from './../../action/action';\nimport {getMessages} from './../../action/action';\nimport { connect} from 'react-redux';\n\nconst SideBar = (props) => {\n    console.log(props)\n    const data = Object.keys(props.contacts).map(key=> props.contacts[key])\n    // console.log(data)\n    const clickHandler = (id,contact) => {\n        // console.log(id)\n        props.dispatch(setActiveUserId(id));\n        props.dispatch(getMessages(contact.userName))\n    }\n    return (\n        <aside className={classes.SideBar}>\n            <>\n                {data.map(contact => (\n                    <ul key={contact.userId} className={classes.List} onClick={() => clickHandler(contact.userId,contact)}>\n                        <img alt=\"userImage\"src={contact.avatar} style={{width:'64px', height:'64px', borderRadius:'50%', objectFit:'cover'}}/>\n                        <li className={classes.ListItem}><strong>{contact.userName}</strong></li>\n                    </ul>\n                ))}\n            </>\n        </aside>\n    )\n};\n\nconst mapStateToProps = state => {\n    return {\n        contacts:state.contacts,\n        messages:state.messages.messages\n    }    \n}\n\nexport default connect(mapStateToProps,null)(SideBar);\n","import React from 'react';\nimport { connect} from 'react-redux';\nimport classes from './User.module.css';\n\nconst User = (props) => {\n    // console.log(props)\n    const {userName, avatar, status} = props.user;\n    \n    return (\n        <div className={classes.User}>\n            <h2>Welcome,{userName}</h2>\n            <img alt =\"userImage\"src={avatar} style={{width:'72px', height:'72px', borderRadius:'50%', objectFit:'cover'}} className={classes.Image}/>\n            <p style={{width:'30vw', marginLeft:'auto', marginRight:'auto'}}><strong>Status</strong>:{status}</p>\n            <button className={classes.Button}>Start a conversation</button>\n        </div>\n    )\n};\n\nconst mapStateToProps = state => {\n    return {\n        user:state.user\n    }\n}\n\nexport default connect(mapStateToProps)(User);\n","import React from 'react';\nimport classes from './Header.module.css';\n\nconst Header = (props) => {\n    // console.log(props)\n    const {userName, status} = props.user\n    return (\n        <header className={classes.Header}>\n            <p style={{textAlign:'left', marginLeft:'20px'}}>To: <strong>{userName}</strong></p>\n            <p style={{textAlign:'left', marginLeft:'20px'}} className={classes.Status}>{status}</p>\n        </header>\n    )\n};\n\nexport default Header;\n","import React from 'react';\n// import classes from './Chat.module.css';\n\nconst Chat = (props) => {\n    console.log(props);\n    const {message, id, isUserMsg} = props;\n    // const {messages} = props;\n    // console.log(messages)\n\n    return (\n        // <div className={classes.ChatContainer}>\n        //     {props.messages.map(message => (\n        //         <span key={message.id} className={`Chat ${message.is_user_msg ? \"is-user-msg\" : \"\"}`}>{message.text}</span>\n        //     ))}\n        // </div>\n        <span key={id} className={`Chat ${isUserMsg ? \"is-user-msg\" : \"\"}`}>\n            {message}\n        </span>\n    )\n};\n\nexport default Chat;\n","import React from 'react';\nimport classes from './Chats.module.css';\nimport Chat from './Chat/Chat';\n\nconst Chats = (props) => {\n    console.log('props', props)\n    const {activeUserMessages} = props;\n    console.log('activeUserMessages',activeUserMessages)\n    \n    const updatedActiveUserMessages = Object.keys(activeUserMessages).map(key=>activeUserMessages[key])\n    \n    return (\n        <div className={classes.Chats}>\n            {updatedActiveUserMessages.map(message => (\n                <Chat message={message.text} key={message.id} isUserMsg={message.is_user_msg}/>\n            ))}\n        </div>\n    )\n};\n\nexport default Chats;\n","import React from 'react';\nimport {userInput, handleUserSubmit} from './../../../../action/action';\nimport classes from './UserInput.module.css';\nimport {connect} from 'react-redux';\n\nconst UserInput = (props) => {\n    console.log(props)\n\n    const userInputChangeHandler = (e) => {\n        props.dispatch(userInput(e.target.value))\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        props.dispatch(handleUserSubmit(props.userInput.value, props.activeUserId))\n        props.userInput.value =''\n    }\n    return (\n        <form onSubmit={handleSubmit} className={classes.Form}>\n            <input \n                placeholder=\"imessage\"\n                value={props.userInput.value}\n                onChange={userInputChangeHandler}\n                className={classes.Input}\n            />\n        </form>\n    )\n};\n\nconst mapStateToProps = state => {\n    // console.log(state)\n    return {\n        activeUserId: state.activeUserId,\n        contacts:state.contacts,\n        messages:state.messages.messages,\n        activeUserMessages:state.messages.activeUserMessages,\n        userInput:state.userInput\n    }\n}\n\nexport default connect(mapStateToProps)(UserInput);\n","import React from 'react';\nimport classes from './ChatWindow.module.css';\nimport Header from './Header/Header';\nimport Chats from './Chats/Chats';\nimport UserInput from './UserInput/UserInput';\nimport {connect} from 'react-redux';\n\n\nconst ChatWindow = (props) => {\n    console.log(props)\n    const activeUserList = Object.keys(props.contacts).map(key=> props.contacts[key])\n    const values = activeUserList.values()\n    let activeUser;\n    for(const value of values) {\n        if(value.userId === props.activeUserId.id) {\n            // console.log(value)\n            activeUser = value\n        }\n    }\n    console.log('activeUser', activeUser)\n    // const activeUserMessages = Object.keys(props.activeUserMessages).map(key=>props.activeUserMessages[key])\n    // console.log('activeUserMessages',activeUserMessages)\n\n    return (\n        <div className={classes.Container}>\n            <Header user={activeUser}/>\n            <Chats activeUserMessages={props.activeUserMessages} activeUser={activeUser}/>\n            <UserInput />\n        </div>\n    )\n};\n\n\nconst mapStateToProps = state => {\n    console.log(state)\n    return {\n        activeUserId: state.activeUserId,\n        contacts:state.contacts,\n        messages:state.messages.messages,\n        activeUserMessages:state.messages.activeUserMessages\n    }\n}\n\n\nexport default connect(mapStateToProps)(ChatWindow);\n","import React from 'react'\nimport classes from './Main.module.css';\nimport User from './User/User';\nimport ChatWindow from './ChatWindow/ChatWindow';\nimport {connect} from 'react-redux';\n\nconst Main = (props) => {\n    let panel = null;\n    if(props.activeUserId.id === null) {\n        panel = <User />\n    } else {\n        panel = <ChatWindow />\n    }\n    return (\n        <div className={classes.Main}>\n            {panel}\n        </div>\n    )\n};\n\nconst mapStateToProps = state => {\n    // console.log(state)\n    return {\n        activeUserId: state.activeUserId\n    }\n}\n\nexport default connect(mapStateToProps)(Main);\n","import React from 'react';\nimport './App.css';\nimport SideBar from '../src/Component/SideBar/SideBar';\nimport Main from './Component/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SideBar />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './action/reducer/reducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}